#include "ros/ros.h"
#include "std_msgs/String.h"
#include <sstream>

// split: true, go to next routine.
//        false is for debugging.
bool split = true;

enum States {
  StartToPass1 = 1,
  WaitPass1 = 11,
  Pass1 = 21,
};

bool next = false;
int next_task = -1;

// stages
void startToPass1() {
  // OdomRun()
  // 
  // CorrectSpace()
}

void waitPass1() {
  //
}

void chatterCallback(const std_msgs::String::ConstPtr& msg)
{
  ROS_INFO("I heard: [%s]", msg->data.c_str());
}
// main workflow
int main(int argc, char **argv)
{
  ros::init(argc, argv, "main");
  ros::NodeHandle n;
  ros::Publisher chatter_pub = n.advertise<std_msgs::String>("chatter", 1000);
  ros::Rate loop_rate(10);
  int count = 0;

  while (ros::ok()) {
    std_msgs::String msg;

    std::stringstream ss;
    ss << "hello world " << count;
    msg.data = ss.str();
    ROS_INFO("%s", msg.data.c_str());
    chatter_pub.publish(msg);
    ros::spinOnce();
    loop_rate.sleep();
    ++count;
  }


  return 0;
}
